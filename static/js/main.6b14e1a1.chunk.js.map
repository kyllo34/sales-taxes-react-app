{"version":3,"sources":["utilities/config.js","components/ItemForm/index.js","Actions/index.js","components/Receipt/index.js","components/Header/index.js","components/Basket/index.js","components/App/index.js","serviceWorker.js","Reducers/receiptReducer.js","utilities/utils.js","Reducers/basketReducer.js","Store/index.js","index.js"],"names":["module","exports","taxBracket","books","goods","food","medical","importTax","connect","addItem","item","type","payload","useForm","register","handleSubmit","reset","className","Form","onSubmit","data","Group","controlId","Label","Control","placeholder","name","ref","required","as","custom","value","min","step","defaultValue","Check","label","Button","mapDispatchToProps","clearReceipt","state","receipt","map","basket","index","key","items","length","summary","salesTax","total","variant","onClick","Header","addBasket","clearBasket","App","Boolean","window","location","hostname","match","action","require","calculateSalesTax","itemTaxPercent","category","imported","Math","ceil","parseFloat","cost","round2Dec","Object","keys","reduce","accumulator","property","round","toFixed","itemTax","quantity","itemCost","newSummary","newItem","description","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b14e1a1.chunk.js","sourcesContent":["// Lookup map for product tax bracket including import\r\nconst taxBracket = {\r\n  books: 0,\r\n  goods: 10,\r\n  food: 0,\r\n  medical: 0,\r\n};\r\n\r\nconst importTax = 5;\r\n\r\nmodule.exports = { taxBracket, importTax };\r\n","import React from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useForm } from 'react-hook-form'\r\nimport './ItemForm.scss'\r\nimport { addItem } from '../../Actions'\r\nimport { connect } from 'react-redux'\r\n\r\nconst ItemForm = ({ addItem }) => {\r\nconst { register, handleSubmit, reset} = useForm();\r\nconst onSubmit = data => {\r\n  addItem(data);\r\n  reset();\r\n}\r\n\r\n  return (\r\n    <div className=\"item-form\">\r\n      <h1>ItemForm</h1>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Form.Group controlId=\"formBasicDescription\">\r\n          <Form.Label>Item Description</Form.Label>\r\n          <Form.Control type=\"text\" placeholder=\"Enter Description\" name=\"description\" ref={register} required/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicCategory\">\r\n          <Form.Label>Item Category</Form.Label>\r\n          <Form.Control as=\"select\" name=\"category\" ref={register} custom>\r\n            <option value=\"goods\">Goods</option>\r\n            <option value=\"books\">Books</option>\r\n            <option value=\"food\">Food</option>\r\n            <option value=\"medical\">Medical Products</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n        \r\n        <Form.Group controlId=\"formBasicQuantity\">\r\n          <Form.Label>Quantity</Form.Label>\r\n          <Form.Control type=\"number\" min=\"0\" step=\"0\" defaultValue=\"1\" name=\"quantity\" ref={register} />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicImported\">\r\n          <Form.Check type=\"checkbox\" label=\"Imported\" name=\"imported\" ref={register} />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='formBasicCost'>\r\n          <Form.Label>Cost</Form.Label>\r\n          <Form.Control type=\"number\" name=\"cost\" step=\"0.01\" defaultValue=\"0\" ref={register} />\r\n        </Form.Group>\r\n        \r\n        <Button type=\"submit\">Add to basket</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {addItem})(ItemForm);\r\n","// Adds item to basket\r\nexport function addItem(item) {\r\n  return {\r\n    type: \"ADD_ITEM\",\r\n    payload: item,\r\n  };\r\n}\r\n\r\n// Adds new basket to receipt array\r\nexport function addBasket(basket) {\r\n  return {\r\n    type: \"ADD_BASKET\",\r\n    payload: basket,\r\n  };\r\n}\r\n\r\n// Clears basket object\r\nexport function clearBasket() {\r\n  return {\r\n    type: \"CLEAR_BASKET\",\r\n  };\r\n}\r\n\r\n// Clears receipt\r\nexport function clearReceipt() {\r\n  return {\r\n    type: \"CLEAR_RECEIPT\",\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Receipt.scss\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { clearReceipt } from \"../../Actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    receipt: state.receipt,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { clearReceipt };\r\n\r\nconst Receipt = ({ receipt, clearReceipt }) => {\r\n  return (\r\n    <div className=\"Receipt\">\r\n      <h1>Receipt</h1>\r\n      <ul>\r\n        {receipt.map((basket, index) => (\r\n          <li key={index}>\r\n            <h4>Basket {index + 1}</h4>\r\n            <ul>\r\n              {basket.items.map((item, index) => (\r\n                <li key={index}>{item}</li>\r\n              ))}\r\n            </ul>\r\n            {basket.items.length > 0 && (\r\n              <div className=\"summary\">\r\n                <div>Sales Tax: {basket.summary.salesTax}</div>\r\n                <div>Total: {basket.summary.total}</div>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={() => {\r\n          clearReceipt();\r\n        }}\r\n      >\r\n        Clear Receipt\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Receipt);\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"Header\">\r\n      <h1>Sales Tax Calculator</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Basket.scss\";\r\nimport { addBasket, clearBasket } from \"../../Actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    basket: state.basket,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { addBasket, clearBasket };\r\n\r\nconst Basket = ({ basket, addBasket, clearBasket }) => {\r\n  return (\r\n    <div className=\"Basket\">\r\n      <h1>Basket</h1>\r\n      <ul>\r\n        {basket.items.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n      {basket.items.length > 0 && (\r\n        <div className=\"summary\">\r\n          <div>Sales Tax: {basket.summary.salesTax}</div>\r\n          <div>Total: {basket.summary.total}</div>\r\n        </div>\r\n      )}\r\n      <Button\r\n        variant=\"primary\"\r\n        onClick={() => {\r\n          addBasket(basket);\r\n          clearBasket();\r\n        }}\r\n      >\r\n        Add to Receipt\r\n      </Button>\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={() => {\r\n          clearBasket();\r\n        }}\r\n      >\r\n        Clear Basket\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Basket);\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport ItemForm from \"../ItemForm\";\nimport Receipt from \"../Receipt\";\nimport Header from \"../Header\";\nimport Basket from \"../Basket\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ItemForm />\n      <Basket />\n      <Receipt />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const receipt = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_BASKET\":\r\n      return action.payload.items.length !== 0 ? [...state, action.payload]: [...state];\r\n    case \"CLEAR_RECEIPT\":\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default receipt;\r\n","// import taxBracket lookup from config.js\r\nconst { taxBracket, importTax } = require(\"./config\");\r\n\r\n// Declare function that accepts an item to determine the sales tax to be applied\r\nexport function calculateSalesTax(item) {\r\n  // First I define the base itemTax to be whatever tax percentage is applicable based on its category\r\n  let itemTaxPercent = taxBracket[item.category];\r\n  // Second I check if the item is imported, if it is, add the import tax\r\n  if (item.imported) itemTaxPercent += importTax;\r\n  // I calculate the itemTax to be the rounded product of the tax percentage, item cost, and 20 divided by 100 and then 20\r\n  // as per rounding rules for sales tax; n%, a shelf price of p contains (np/100 rounded up to the nearest 0.05) amount of sales tax.\r\n  let itemTax = Math.ceil((itemTaxPercent * parseFloat(item.cost) * 20) / 100) / 20;\r\n  return itemTax;\r\n}\r\n\r\n// Declare function that returns the summary object but with its values rounded to the 100s\r\n// This function was created to account for rounding errors for numbers whose value cannot be represented exactly in binary\r\n//  i.e. 14.99 + 1.5 = 16.490000000000002 => 16.49\r\nexport function round2Dec(summary) {\r\n  // Defined roundedSummary to be copy of summary as to avoid mutation\r\n  let roundedSummary = Object.keys(summary).reduce(\r\n    // Iterate through both keys in the summary object and round their respective values to the nearest 100th place and returns a string\r\n    // Use reduce method on object.keys iterator to iterate through keys and modify them and returning a new modified object\r\n    // Initialize the spread of the summary object as the accumulator\r\n    function(accumulator, property) {\r\n      accumulator[property] = (\r\n        Math.round(accumulator[property] * 100) / 100\r\n      ).toFixed(2);\r\n      return accumulator;\r\n    },\r\n    { ...summary }\r\n  );\r\n\r\n  return roundedSummary;\r\n}","import { calculateSalesTax, round2Dec } from \"../utilities/utils\";\r\n\r\nconst basket = (\r\n  state = { items: [], summary: { salesTax: 0, total: 0 } },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_ITEM\":\r\n      // Define itemTax to be the calculated sales tax multiplied by the item quantity\r\n      let itemTax =\r\n        calculateSalesTax(action.payload) * parseFloat(action.payload.quantity);\r\n      // Define itemCost to be the original cost plus tax\r\n      let itemCost = parseFloat(action.payload.cost) + itemTax;\r\n      // Create a copy of the summary object to avoid mutation\r\n      let newSummary = { ...state.summary };\r\n      // Set sales tax equal to itself plus the new item's tax\r\n      newSummary.salesTax = parseFloat(newSummary.salesTax) + itemTax;\r\n      // Set total equal to itself plus the new item's cost multiplied by its quantity\r\n      newSummary.total =\r\n        parseFloat(newSummary.total) +\r\n        itemCost * parseFloat(action.payload.quantity);\r\n      // Define newItem to be the string of the quantity, import state, description, and cost of the item\r\n      let newItem = `${action.payload.quantity} ${\r\n        action.payload.imported ? \"imported\" : \"\"\r\n      } ${action.payload.description}: $${itemCost.toFixed(2)}`;\r\n      return {\r\n        items: [...state.items, newItem],\r\n        summary: round2Dec(newSummary),\r\n      };\r\n    case \"CLEAR_BASKET\":\r\n      return { items: [], summary: { salesTax: 0, total: 0 } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default basket;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport receipt from \"../Reducers/receiptReducer\";\r\nimport basket from \"../Reducers/basketReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    receipt,\r\n    basket,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}